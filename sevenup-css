#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const sade = require('sade');
const c = require('kleur');

const error = msg => {
	console.error(c.bold().red(msg));
	process.exit(1);
};

sade('sevenup-css <srcfile>')
	.version(require('./package.json').version)
	.describe('Create css spritesheet from json sprite')
	.example('sevenup css demo/output/sprite.json')
	.action(async (src) => {
		// remove trailing path separators
		if (src.endsWith(path.sep)) src = src.slice(0, -1);
		// if (spriteImageName.endsWith(path.sep)) spriteImageName = spriteImageName.slice(0, -1);
		const dest = path.dirname(src);
		const spriteImage = path.basename(src, path.extname(src) );
		console.log(`converting ${src} to css sprite...`);
		fs.readFile(src, 'utf8', (err, spriteContent)=>{
			if (err) {
				error(`Failed to load file : ${err}`);
				return;
			}
			try {
				const sprite = JSON.parse(spriteContent)
				let cssSprite = `.sevenup{background-image: url('${spriteImage}.png') !important;}`;
				for (var key in sprite) {
					if (sprite.hasOwnProperty(key)) {
						const spriteElement = sprite[key];
						cssSprite += `.sevenup[class*='${key}']{width: ${spriteElement[2]}px;height: ${spriteElement[3]}px;background-position: top ${-1*spriteElement[1]}px left ${-1*spriteElement[0]}px;}`;
					}
				}
				console.log(`generating css spritesheet...`);
				fs.writeFile(`${dest}\\${spriteImage}.css`, cssSprite, function(err) {
					if(err) {
						error(`Failed to save css spritesheet : ${err}`);
						return;
					}				
					console.log("css spritesheet generated âœ”");
				}); 
			}catch (e) {
				error(`Failed to parse sprite file : ${e}`);
			}
			
		});
	})
	.parse(process.argv);
